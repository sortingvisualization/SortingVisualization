#pragma once
#include <map>
#include <string>

// every text displayed on screen should be made a translation as a separate enum value
// this will allow to translate it easily to different lanuages
enum class Tc
{
	ArraySize,
	ButtonBack,
	ButtonReset,
	ButtonSort,
	ButtonStop,
	Color1,
	Color2,
	DrawCircle,
	DrawColumns,
	DrawLines,
	DrawMethod,
	DrawPyramid,
	LanguageEnglish,
	LanguagePolish,
	ModeLearning,
	ModeVisualization,
	Options,
	Speed,
	SortAlgorithms,
	SortBubble,
	SortInsertion,
	SortMerge,
	SortQuick,
	SortRadix,
	SortSelection,
	StateNoContext,
	StateSorted,
	StateBubbleSort,
	StateBubbleSortCompare,
	StateBubbleSortLastElementSorted,
	StateBubbleSortLastElementsSorted,
	StateBubbleSortSwap,
	StateInsertionSort,
	StateInsertionSortCompare,
	StateInsertionSortFirstElementSorted,
	StateInsertionSortSelectElement,
	StateInsertionSortPrevLower,
	StateInsertionSortSwap,
	StateMergeSort,
	StateMergeSortMarkParts,
	StateMergeSortSelectLowestValue,
	StateMergeSortTemporarilyCopy,
	StateMergeSortCopyBack,
	StateQuickSort,
	StateQuickSortAllElementsLowerThanPivot,
	StateQuickSortMarkLowerThanPivot,
	StateQuickSortMarkHigherThanPivot,
	StateQuickSortMarkPivotAsSorted,
	StateQuickSortMarkLastElementSorted,
	StateQuickSortSelectPivotBegin,
	StateQuickSortSelectPivot,
	StateQuickSortSelectNextElement,
	StateQuickSortSwapPivot,
	StateQuickSortSwapPivotWithTemporaryPivot,
	StateQuickSortSwapWithTemporaryPivot,
	StateRadixSort,
	StateRadixSortCopyValues,
	StateRadixSortCopyValuesBack,
	StateRadixSortDecrementCount,
	StateRadixSortIncrementCount,
	StateRadixSortMoveToTemporaryArray,
	StateRadixSortSelectBucket,
	StateRadixSortSelectBuckets,
	StateRadixSortSelectNextElement,
	StateRadixSortSelectOutgoing,
	StateRadixSortSumCount,
	StateSelectionSort,
	StateSelectionSortCompare,
	StateSelectionSortNoNeedSwap,
	StateSelectionSortMarkAsSorted,
	StateSelectionSortMarkLastAsSorted,
	StateSelectionSortSelectFirstElement,
	StateSelectionSortSelectFirstUnsortedElement,
	StateSelectionSortSelectNewLowestElement,
	StateSelectionSortSwapLowestWithUnsorted
};

namespace
{
// the string value in this mapping refers to the key in the .json file for the specific language
// the string value is the same as the enum value to avoid confusion
std::map<Tc, std::string> translationConstToKeyMap =
{
	{Tc::ArraySize, "ArraySize"},
	{Tc::ButtonBack, "ButtonBack"},
	{Tc::ButtonReset, "ButtonReset"},
	{Tc::ButtonSort, "ButtonSort"},
	{Tc::ButtonStop, "ButtonStop"},
	{Tc::Color1, "Color1"},
	{Tc::Color2, "Color2"},
	{Tc::DrawCircle, "DrawCircle"},
	{Tc::DrawColumns, "DrawColumns"},
	{Tc::DrawLines, "DrawLines"},
	{Tc::DrawMethod, "DrawMethod"},
	{Tc::DrawPyramid, "DrawPyramid"},
	{Tc::LanguageEnglish, "LanguageEnglish"},
	{Tc::LanguagePolish, "LanguagePolish"},
	{Tc::ModeLearning, "ModeLearning"},
	{Tc::ModeVisualization, "ModeVisualization"},
	{Tc::Options, "Options"},
	{Tc::Speed, "Speed"},
	{Tc::SortAlgorithms, "SortAlgorithms"},
	{Tc::SortBubble, "SortBubble"},
	{Tc::SortInsertion, "SortInsertion"},
	{Tc::SortMerge, "SortMerge"},
	{Tc::SortQuick, "SortQuick"},
	{Tc::SortRadix, "SortRadix"},
	{Tc::SortSelection, "SortSelection"},
	{Tc::StateNoContext, "StateNoContext"},
	{Tc::StateSorted, "StateSorted"},
	{Tc::StateBubbleSort, "StateBubbleSort"},
	{Tc::StateBubbleSortCompare, "StateBubbleSortCompare"},
	{Tc::StateBubbleSortLastElementSorted, "StateBubbleSortLastElementSorted"},
	{Tc::StateBubbleSortLastElementsSorted, "StateBubbleSortLastElementsSorted"},
	{Tc::StateBubbleSortSwap, "StateBubbleSortSwap"},
	{Tc::StateInsertionSort, "StateInsertionSort"},
	{Tc::StateInsertionSortCompare, "StateInsertionSortCompare"},
	{Tc::StateInsertionSortFirstElementSorted, "StateInsertionSortFirstElementSorted"},
	{Tc::StateInsertionSortSelectElement, "StateInsertionSortSelectElement"},
	{Tc::StateInsertionSortPrevLower, "StateInsertionSortPrevLower"},
	{Tc::StateInsertionSortSwap, "StateInsertionSortSwap"},
	{Tc::StateMergeSort, "StateMergeSort"},
	{Tc::StateMergeSortMarkParts, "StateMergeSortMarkParts"},
	{Tc::StateMergeSortSelectLowestValue, "StateMergeSortSelectLowestValue"},
	{Tc::StateMergeSortTemporarilyCopy, "StateMergeSortTemporarilyCopy"},
	{Tc::StateMergeSortCopyBack, "StateMergeSortCopyBack"},
	{Tc::StateQuickSort, "StateQuickSort"},
	{Tc::StateQuickSortAllElementsLowerThanPivot, "StateQuickSortAllElementsLowerThanPivot"},
	{Tc::StateQuickSortMarkLowerThanPivot, "StateQuickSortMarkLowerThanPivot"},
	{Tc::StateQuickSortMarkHigherThanPivot, "StateQuickSortMarkHigherThanPivot"},
	{Tc::StateQuickSortMarkPivotAsSorted, "StateQuickSortMarkPivotAsSorted"},
	{Tc::StateQuickSortMarkLastElementSorted, "StateQuickSortMarkLastElementSorted"},
	{Tc::StateQuickSortSelectPivotBegin, "StateQuickSortSelectPivotBegin"},
	{Tc::StateQuickSortSelectPivot, "StateQuickSortSelectPivot"},
	{Tc::StateQuickSortSelectNextElement, "StateQuickSortSelectNextElement"},
	{Tc::StateQuickSortSwapPivot, "StateQuickSortSwapPivot"},
	{Tc::StateQuickSortSwapPivotWithTemporaryPivot, "StateQuickSortSwapPivotWithTemporaryPivot"},
	{Tc::StateQuickSortSwapWithTemporaryPivot, "StateQuickSortSwapWithTemporaryPivot"},
	{Tc::StateRadixSort, "StateRadixSort"},
	{Tc::StateRadixSortCopyValues, "StateRadixSortCopyValues"},
	{Tc::StateRadixSortCopyValuesBack, "StateRadixSortCopyValuesBack"},
	{Tc::StateRadixSortDecrementCount, "StateRadixSortDecrementCount"},
	{Tc::StateRadixSortIncrementCount, "StateRadixSortIncrementCount"},
	{Tc::StateRadixSortMoveToTemporaryArray, "StateRadixSortMoveToTemporaryArray"},
	{Tc::StateRadixSortSelectBucket, "StateRadixSortSelectBucket"},
	{Tc::StateRadixSortSelectBuckets, "StateRadixSortSelectBuckets"},
	{Tc::StateRadixSortSelectNextElement, "StateRadixSortSelectNextElement"},
	{Tc::StateRadixSortSelectOutgoing, "StateRadixSortSelectOutgoing"},
	{Tc::StateRadixSortSumCount, "StateRadixSortSumCount"},
	{Tc::StateSelectionSort, "StateSelectionSort"},
	{Tc::StateSelectionSortCompare, "StateSelectionSortCompare"},
	{Tc::StateSelectionSortNoNeedSwap, "StateSelectionSortNoNeedSwap"},
	{Tc::StateSelectionSortMarkAsSorted, "StateSelectionSortMarkAsSorted"},
	{Tc::StateSelectionSortMarkLastAsSorted, "StateSelectionSortMarkLastAsSorted"},
	{Tc::StateSelectionSortSelectFirstElement, "StateSelectionSortSelectFirstElement"},
	{Tc::StateSelectionSortSelectFirstUnsortedElement, "StateSelectionSortSelectFirstUnsortedElement"},
	{Tc::StateSelectionSortSelectNewLowestElement, "StateSelectionSortSelectNewLowestElement"},
	{Tc::StateSelectionSortSwapLowestWithUnsorted, "StateSelectionSortSwapLowestWithUnsorted"},
};
}
